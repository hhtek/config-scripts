#!/bin/bash
# ---------------------------------------------------------------------------- #
# FUNCTIONS and ALIASES to be included in .bashrc #
# ---------------------------------------------------------------------------- #

# MAKE TERMINAL BETTER
# ------------------------------------------------------------------------------
alias cal='cal -3'                          # Prefered 'cal' implementation
alias cp='cp -iv'                           # Preferred 'cp' implementation
alias mv='mv -iv'                           # Preferred 'mv' implementation
alias mkdir='mkdir -pv'                     # Preferred 'mkdir' implementation
alias ll='ls -FGlAhp'                       # Preferred 'ls' implementation
alias less='less -FSRXc'                    # Preferred 'less' implementation
cd() { builtin cd "$@"; ls; }               # Always list directory contents upon 'cd'
alias cd..='cd ../'                         # Go back 1 directory level (for fast typers)
alias ..='cd ../'                           # Go back 1 directory level
alias ...='cd ../../'                       # Go back 2 directory levels
alias .3='cd ../../../'                     # Go back 3 directory levels
alias .4='cd ../../../../'                  # Go back 4 directory levels
alias .5='cd ../../../../../'               # Go back 5 directory levels
alias .6='cd ../../../../../../'            # Go back 6 directory levels
alias edit='subl'                           # edit:         Opens any file in sublime editor
alias f='open -a Finder ./'                 # f:            Opens current directory in MacOS Finder
alias ~="cd ~"                              # ~:            Go Home
alias c='clear'                             # c:            Clear terminal display
alias which='type -all'                     # which:        Find executables
alias path='echo -e ${PATH//:/\\n}'         # path:         Echo all executable Paths
alias show_options='shopt'                  # Show_options: display bash options settings
alias fix_stty='stty sane'                  # fix_stty:     Restore terminal settings when screwed up
alias cic='set completion-ignore-case On'   # cic:          Make tab-completion case-insensitive
alias DT='tee ~/Desktop/terminalOut.txt'    # DT:           Pipe content to file on MacOS Desktop
alias auth='view ~/Personal/Mirror/Documents/.auth.bfa'   # Open encrypted .auth file
alias pcl='ll *.pcap*'
alias pcd='rm -v ~/Downloads/*.pcap*' 
alias pcm='mv -v ~/Downloads/*.pcap* ~/Downloads/pcaps/'
mcd () { mkdir -p "$1" && cd "$1"; }        # mcd:          Makes new Dir and jumps inside
trash () { command mv "$@" ~/.Trash ; }     # trash:        Moves a file to the MacOS trash
ql () { qlmanage -p "$*" >& /dev/null; }    # ql:           Opens any file in MacOS Quicklook Preview
p6 () { ping6 $1; }                         # ping IPv6
#   lr:  Full Recursive Directory Listing
alias lr='ls -R | grep ":$" | sed -e '\''s/:$//'\'' -e '\''s/[^-][^\/]*\//--/g'\'' -e '\''s/^/   /'\'' -e '\''s/-/|/'\'' | less'

#   mans:   Search manpage given in agument '1' for term given in argument '2' (case insensitive)
#           displays paginated result with colored search terms and two lines surrounding each hit.             Example: mans mplayer codec
#   --------------------------------------------------------------------
    mans () {
        man $1 | grep -iC2 --color=always $2 | less
    }

#   showa: to remind yourself of an alias (given some part of it)
#   ------------------------------------------------------------
    showa () { /usr/bin/grep --color=always -i -a1 $@ ~/Library/init/bash/aliases.bash | grep -v '^\s*$' | less -FSRXc ; }

# -------------------------------
# FILE AND FOLDER MANAGEMENT
# -------------------------------
zipf () { zip -r "$1".zip "$1" ; }          # zipf:         To create a ZIP archive of a folder
alias numFiles='echo $(ls -1 | wc -l)'      # numFiles:     Count of non-hidden files in current dir
alias make1mb='mkfile 1m ./1MB.dat'         # make1mb:      Creates a file of 1mb size (all zeros)
alias make5mb='mkfile 5m ./5MB.dat'         # make5mb:      Creates a file of 5mb size (all zeros)
alias make10mb='mkfile 10m ./10MB.dat'      # make10mb:     Creates a file of 10mb size (all zeros)

# cdf:  'Cd's to frontmost window of MacOS Finder
# ------------------------------------------------------
cdf () {
    currFolderPath=$( /usr/bin/osascript <<EOT
        tell application "Finder"
            try
        set currFolder to (folder of the front window as alias)
            on error
        set currFolder to (path to desktop folder as alias)
            end try
            POSIX path of currFolder
        end tell
EOT
    )
    echo "cd to \"$currFolderPath\""
    cd "$currFolderPath"
}

# extract:  Extract most know archives with one command
# ---------------------------------------------------------
extract () {
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xjf $1     ;;
      *.tar.gz)    tar xzf $1     ;;
      *.bz2)       bunzip2 $1     ;;
      *.rar)       unrar e $1     ;;
      *.gz)        gunzip $1      ;;
      *.tar)       tar xf $1      ;;
      *.tbz2)      tar xjf $1     ;;
      *.tgz)       tar xzf $1     ;;
      *.zip)       unzip $1       ;;
      *.Z)         uncompress $1  ;;
      *.7z)        7z x $1        ;;
      *)     echo "'$1' cannot be extracted via extract()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

# ---------------------------
# SEARCHING
# ---------------------------
alias qfind="find . -name "                 # qfind:    Quickly search for file
ff () { /usr/bin/find . -name "$@" ; }      # ff:       Find file under the current directory
ffs () { /usr/bin/find . -name "$@"'*' ; }  # ffs:      Find file whose name starts with a given string
ffe () { /usr/bin/find . -name '*'"$@" ; }  # ffe:      Find file whose name ends with a given string

# spotlight: Search for a file using MacOS Spotlight's metadata
spotlight () { mdfind "kMDItemDisplayName == '$@'wc"; }

# ---------------------------
# PROCESS MANAGEMENT
# ---------------------------

#   findPid: find out the pid of a specified process
#   -----------------------------------------------------
#       Note that the command name can be specified via a regex
#       E.g. findPid '/d$/' finds pids of all processes with names ending in 'd'
#       Without the 'sudo' it will only find processes of the current user
#   -----------------------------------------------------
findPid () { lsof -t -c "$@" ; }

# memHogsTop, memHogsPs:  Find memory hogs
# -----------------------------------------------------
alias memHogsTop='top -l 1 -o rsize | head -20'
alias memHogsPs='ps wwaxm -o pid,stat,vsize,rss,time,command | head -10'

# cpuHogs:  Find CPU hogs
# ---------------------------------------------------
alias cpu_hogs='ps wwaxr -o pid,stat,%cpu,time,command | head -10'

# topForever:  Continual 'top' listing (every 10 seconds)
# -----------------------------------------------------
alias topForever='top -l 9999999 -s 10 -o cpu'

# ttop:  Recommended 'top' invocation to minimize resources
# ------------------------------------------------------------
# Taken from this macosxhints article
# http://www.macosxhints.com/article.php?story=20060816123853639
# ------------------------------------------------------------
alias ttop="top -R -F -s 10 -o rsize"

# myps: List processes owned by my user:
myps() { ps $@ -u $USER -o pid,%cpu,%mem,start,time,bsdtime,command ; }

# ---------------------------
# NNETWORKING
# ---------------------------

myip() {  # myip: Public facing IP Address
  dig +short myip.opendns.com @resolver1.opendns.com | tr -d '\n' | pbcopy
}

alias netCons='lsof -i'                             # netCons:      Show all open TCP/IP sockets
alias flushDNS='dscacheutil -flushcache'            # flushDNS:     Flush out the DNS Cache
alias lsock='sudo /usr/sbin/lsof -i -P'             # lsock:        Display open sockets
alias lsockU='sudo /usr/sbin/lsof -nP | grep UDP'   # lsockU:       Display only open UDP sockets
alias lsockT='sudo /usr/sbin/lsof -nP | grep TCP'   # lsockT:       Display only open TCP sockets
alias ipInfo0='ipconfig getpacket en0'              # ipInfo0:      Get info on connections for en0
alias ipInfo1='ipconfig getpacket en1'              # ipInfo1:      Get info on connections for en1
alias openPorts='sudo lsof -i | grep LISTEN'        # openPorts:    All listening connections
alias showBlocked='sudo ipfw list'                  # showBlocked:  All ipfw rules inc/ blocked IPs

rsh () {  # ssh to a remote server via a Jump host
  jumpid="~/.ssh/id_rsa"
  ssh -i $jumpid -J jump -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no root@$1
}

rcp () {  # copy the remote files or directory via a Jump host to local's current directory
  # Usage: rcp [remote host IP] [remote path]
  jumphost="jump" # jump host defined in the ~/.ssh/config
  remotehost=$1   # remote host IP
  remotepath=$2   # remote file or directory
  scp -pr -o ProxyJump=$jumphost root@\[$remotehost\]:$remotepath ./
}

rcat () {  # cat a remote file via a jumpbox
  jumphost="jump"
  jumpid="~/.ssh/id_rsa"
  if [[ $# -eq 2 ]]; then  # just reading to STDOUT
    remotehost=$1; remotefile=$2
    ssh -i $jumpid -J $jumphost root@$remotehost "cat $remotefile"
    return 1
  fi

  opt=$1
  remotehost=$2  # remote host IP
  remotefile=$3  # remote file path
  case $opt in
    "-l")  # read ~/.mcheetsheet.csv
      awk -F, '{ printf "%-100s %s\n", $1, $2 }' ~/.mcheetsheet.csv;;
    "-t")
      ssh -i $jumpid -J $jumphost root@$remotehost "tail -f $remotefile";;
    "-c")
      ssh -i $jumpid -J $jumphost root@$remotehost "cat $remotefile";;
    "-rc")
      device=$3; filter=$4
      wireshark -k -i <(ssh -i $jumpid -J $jumphost root@$remotehost \
        "tcpdump -s94 -nU -w- -i $device $filter");;
  esac
}

rcmd () {  # run the commands in a remote server via a jumpbox
  jumphost="jump"
  jumpid="~/.ssh/id_rsa"
  remotehost=$1  # remote host IP
  remotecmds=$2  # remote commands separated by ;
  ssh -i $jumpid -J $jumphost root@$remotehost "$remotecmds"
}

# ii:  display useful host's related informaton
# -------------------------------------------------------------------
ii() {
    echo -e "\nYou are logged on ${RED}$HOST"
    echo -e "\nAdditionnal information:$NC " ; uname -a
    echo -e "\n${RED}Users logged on:$NC " ; w -h
    echo -e "\n${RED}Current date :$NC " ; date
    echo -e "\n${RED}Machine stats :$NC " ; uptime
    echo -e "\n${RED}Current network location :$NC " ; scselect
    echo -e "\n${RED}Public facing IP Address :$NC " ;myip
    #echo -e "\n${RED}DNS Configuration:$NC " ; scutil --dns
    echo
}

# ---------------------------------------
# SYSTEMS and APPs OPERATIONS
# ---------------------------------------
alias mountReadWrite='/sbin/mount -uw /'    # mountReadWrite:   For use when booted into single-user
# cleanupDS:  Recursively delete .DS_Store files
# -------------------------------------------------------------------
alias cleanupDS="find . -type f -name '*.DS_Store' -ls -delete"

# finderShowHidden:   Show hidden files in Finder
# finderHideHidden:   Hide hidden files in Finder
# -------------------------------------------------------------------
alias finderShowHidden='defaults write com.apple.finder ShowAllFiles TRUE'
alias finderHideHidden='defaults write com.apple.finder ShowAllFiles FALSE'

# cleanupLS:  Clean up LaunchServices to remove duplicates in the "Open With" menu
# -----------------------------------------------------------------------------------
alias cleanupLS="/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user && killall Finder"

# screensaverDesktop: Run a screensaver on the Desktop
# -----------------------------------------------------------------------------------
alias screensaverDesktop='/System/Library/Frameworks/ScreenSaver.framework/Resources/ScreenSaverEngine.app/Contents/MacOS/ScreenSaverEngine -background'

ws() { # Open and close multiple wireshark instances
  if [[ $# -eq 0 ]]; then
    open -n /Applications/Wireshark.app # open a single wireshark instances
    return 1
  fi

  case $1 in
    "-ka")
      pkill -i wireshark # terminate all Wireshark instances
      return 1
      ;;
    "-mmin") # open pcap file changed last n minutes
      find -E . -d 1 -type f -mmin $2 -iregex '.*\.pcap(ng)?$' \
        -exec open -n /Applications/Wireshark.app {} \;
      ;;
    "-c") # open pcap files changed last minute
      find -E . -d 1 -type f -mmin 1 -iregex '.*\.pcap(ng)?$' \
        -exec open -n /Applications/Wireshark.app {} \;
      return 1
      ;;
  esac

  # open PCAP files separated by space or * (for all PCAP files)
  for i in "$@"; do
    if [[ $i =~ \.[pP][cC][aA][pP]([nN][gG])?$ ]]; then
      open -n /Applications/Wireshark.app "$i"
      echo "Done with openning '$i'"
      x=$((x+1))
      echo $x
    fi
  done
}

osslcsr() { openssl req -text -noout -verify -in "$1"; }  # Verify certficate service request file (*.csr)
osslcert() { openssl x509 -text -noout -in "$1"; }  # Read certificate in plain text

# ---------------------------------------
# WEB Information
# ---------------------------------------
httpHeaders () { /usr/bin/curl -I -L $@; }  # Grabs headers from web page
httpDebug () {  # httpDebug:  Download a web page and show info on what took time
  /usr/bin/curl $@ -o /dev/null -w \
  "dns: %{time_namelookup} \
  connect: %{time_connect} \
  pretransfer: %{time_pretransfer} \
  starttransfer: %{time_starttransfer} \
  total: %{time_total}\n";
}

py3 () { python3 -m venv "$1"; }  # Create a python virtual environment
pyvenv () {  # Activate or deactivate python virtual environment
  case $1 in
    -a)
      # Get directory contains file named 'activate'
      activate_file_path=$(find . -type f -name "activate" -exec dirname {} \;)

      if [ $(basename $activate_file_path) = 'bin' ]; then
        source $activate_file_path/activate  # activate python venv
      fi
      ;;
    -d)
      deactivate;;
  esac
}

# ---------------------------------------
# Docker Operations
# ---------------------------------------
alias dls='docker image list'  # List docker images
alias dlc='docker ps'  # List docker containers
